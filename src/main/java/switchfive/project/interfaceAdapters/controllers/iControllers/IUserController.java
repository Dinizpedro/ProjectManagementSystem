package switchfive.project.interfaceAdapters.controllers.iControllers;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import switchfive.project.dtos.ChangePasswordDTO;
import switchfive.project.dtos.UpdateUserProfileDTO;
import switchfive.project.dtos.UserDTO;

import java.security.NoSuchAlgorithmException;
import java.text.ParseException;

public interface IUserController {

    ResponseEntity<Object> getAllUsers() throws ParseException, NoSuchAlgorithmException;

    /**
     * Creates User if all fields are valid.
     *
     * @param userDTO - fields to be inserted by user.
     * @return HTTPStatus.OK with message if user is created successfully,
     * otherwise returns HTTPStatus.CONFLICT with error message.
     */
    ResponseEntity<Object> createUser(@RequestBody UserDTO userDTO)
            throws NoSuchAlgorithmException;

    ResponseEntity<Object> addProfile(String email, UpdateUserProfileDTO dto);

    ResponseEntity<Object> removeProfile(String email, UpdateUserProfileDTO dto);

    ResponseEntity<Object> getUsersByEmail(@PathVariable(value = "email") String email) throws NoSuchAlgorithmException;

    /* ResponseEntity<Object> getUsersByProfile(@PathVariable(value = "id") int profileId);
     */
    /**
     * If code is the same as the one generated by the system user account is activated.
     *
     * @param userID  - field for user identification.
     * @param userDTO - code to activate account.
     * @return HttpStatus.OK with message if User account is successfully activated,
     * otherwise returns HttpStatus.NOT_ACCEPTABLE with error message.
     */
    /*ResponseEntity<Object> activateAccount(@PathVariable(value = "userid") int userID,
                                           @RequestBody UserDTO userDTO);*/

    /**
     * Update user if fields to be changed are successfully inserted.
     *
     * @param userDTO - field to update user.
     * @return HttpStatus.OK with message if User is successfully updated,
     * otherwise returns HttpStatus.CONFLICT with error message.
     */
    ResponseEntity<Object> updateUser(@RequestBody UserDTO userDTO) throws NoSuchAlgorithmException;

    /**
     * Change the password of the user
     *
     * @param passwordDto field to change password
     * @returnHttpStatus.OK with message if password of the User is successfully changed,
     * otherwise returns HttpStatus Conflict with error message.
     */
    //new
    ResponseEntity<Object> changePassword(@RequestBody ChangePasswordDTO passwordDto)
            throws NoSuchAlgorithmException;

    ResponseEntity<Object> getAllocatedProjects(@PathVariable final String email)
            throws NoSuchAlgorithmException, ParseException;
}
